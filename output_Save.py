import numpy as np
import matplotlib.pyplot as plt
import os
v_1_a = np.linspace(4, 29, num=50)
v_2 = np.linspace(2,12, num=50)
result_matrix = np.zeros((len(v_1_a), len(v_2)))

fig= plt.figure()
ax = fig.add_subplot(111, projection='3d')
def plotNetworkOutput():

   for i in range(len(v_1_a)):
       result_matrix[i,:] = (0.15039967000484467+np.tanh(0.4604407250881195+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*1.5849065780639648+((v_2-2.0)*2/(12.0-2.0)-1)*-0.17699909210205078+1.3885849714279175)*-0.17343774437904358+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*2.022256374359131+((v_2-2.0)*2/(12.0-2.0)-1)*-1.2527353763580322+0.7093727588653564)*0.00866992399096489+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.21007363498210907+((v_2-2.0)*2/(12.0-2.0)-1)*-1.952702283859253+-2.084312915802002)*0.5219166278839111+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.6200516819953918+((v_2-2.0)*2/(12.0-2.0)-1)*-0.01179190631955862+-0.14483411610126495)*0.03843772038817406+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*-0.6299529075622559+((v_2-2.0)*2/(12.0-2.0)-1)*2.1679329872131348+1.142025113105774)*0.22151082754135132+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.1469927728176117+((v_2-2.0)*2/(12.0-2.0)-1)*-1.1869670152664185+-0.9098482131958008)*0.07010622322559357+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.022220861166715622+((v_2-2.0)*2/(12.0-2.0)-1)*-0.13009648025035858+-0.001967411022633314)*-0.1620902270078659+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*-1.1405948400497437+((v_2-2.0)*2/(12.0-2.0)-1)*0.2297222912311554+-0.42210036516189575)*-0.026483312249183655)*-0.035676587373018265+np.tanh(0.2968733012676239+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*1.5849065780639648+((v_2-2.0)*2/(12.0-2.0)-1)*-0.17699909210205078+1.3885849714279175)*0.016983401030302048+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*2.022256374359131+((v_2-2.0)*2/(12.0-2.0)-1)*-1.2527353763580322+0.7093727588653564)*0.13612253963947296+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.21007363498210907+((v_2-2.0)*2/(12.0-2.0)-1)*-1.952702283859253+-2.084312915802002)*0.43158525228500366+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.6200516819953918+((v_2-2.0)*2/(12.0-2.0)-1)*-0.01179190631955862+-0.14483411610126495)*0.21161140501499176+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*-0.6299529075622559+((v_2-2.0)*2/(12.0-2.0)-1)*2.1679329872131348+1.142025113105774)*0.18340227007865906+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.1469927728176117+((v_2-2.0)*2/(12.0-2.0)-1)*-1.1869670152664185+-0.9098482131958008)*-0.05148618668317795+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.022220861166715622+((v_2-2.0)*2/(12.0-2.0)-1)*-0.13009648025035858+-0.001967411022633314)*0.048378314822912216+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*-1.1405948400497437+((v_2-2.0)*2/(12.0-2.0)-1)*0.2297222912311554+-0.42210036516189575)*0.28272196650505066)*-0.019857250154018402+np.tanh(-0.411356121301651+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*1.5849065780639648+((v_2-2.0)*2/(12.0-2.0)-1)*-0.17699909210205078+1.3885849714279175)*-0.3306470811367035+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*2.022256374359131+((v_2-2.0)*2/(12.0-2.0)-1)*-1.2527353763580322+0.7093727588653564)*0.3706093430519104+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.21007363498210907+((v_2-2.0)*2/(12.0-2.0)-1)*-1.952702283859253+-2.084312915802002)*-0.6670408248901367+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.6200516819953918+((v_2-2.0)*2/(12.0-2.0)-1)*-0.01179190631955862+-0.14483411610126495)*0.03722427412867546+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*-0.6299529075622559+((v_2-2.0)*2/(12.0-2.0)-1)*2.1679329872131348+1.142025113105774)*-0.39353883266448975+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.1469927728176117+((v_2-2.0)*2/(12.0-2.0)-1)*-1.1869670152664185+-0.9098482131958008)*-0.5677144527435303+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.022220861166715622+((v_2-2.0)*2/(12.0-2.0)-1)*-0.13009648025035858+-0.001967411022633314)*-0.5784060955047607+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*-1.1405948400497437+((v_2-2.0)*2/(12.0-2.0)-1)*0.2297222912311554+-0.42210036516189575)*-0.41349902749061584)*0.18961955606937408+np.tanh(0.354881227016449+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*1.5849065780639648+((v_2-2.0)*2/(12.0-2.0)-1)*-0.17699909210205078+1.3885849714279175)*-0.5009428262710571+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*2.022256374359131+((v_2-2.0)*2/(12.0-2.0)-1)*-1.2527353763580322+0.7093727588653564)*-0.3579038679599762+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.21007363498210907+((v_2-2.0)*2/(12.0-2.0)-1)*-1.952702283859253+-2.084312915802002)*-0.5429190397262573+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.6200516819953918+((v_2-2.0)*2/(12.0-2.0)-1)*-0.01179190631955862+-0.14483411610126495)*0.5685961246490479+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*-0.6299529075622559+((v_2-2.0)*2/(12.0-2.0)-1)*2.1679329872131348+1.142025113105774)*0.5832601189613342+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.1469927728176117+((v_2-2.0)*2/(12.0-2.0)-1)*-1.1869670152664185+-0.9098482131958008)*-0.37850555777549744+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.022220861166715622+((v_2-2.0)*2/(12.0-2.0)-1)*-0.13009648025035858+-0.001967411022633314)*0.17086990177631378+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*-1.1405948400497437+((v_2-2.0)*2/(12.0-2.0)-1)*0.2297222912311554+-0.42210036516189575)*-0.03120691142976284)*0.39340683817863464+np.tanh(0.510928213596344+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*1.5849065780639648+((v_2-2.0)*2/(12.0-2.0)-1)*-0.17699909210205078+1.3885849714279175)*1.4283068180084229+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*2.022256374359131+((v_2-2.0)*2/(12.0-2.0)-1)*-1.2527353763580322+0.7093727588653564)*0.6591601371765137+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.21007363498210907+((v_2-2.0)*2/(12.0-2.0)-1)*-1.952702283859253+-2.084312915802002)*0.9982331991195679+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.6200516819953918+((v_2-2.0)*2/(12.0-2.0)-1)*-0.01179190631955862+-0.14483411610126495)*0.48084065318107605+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*-0.6299529075622559+((v_2-2.0)*2/(12.0-2.0)-1)*2.1679329872131348+1.142025113105774)*-0.9050993323326111+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.1469927728176117+((v_2-2.0)*2/(12.0-2.0)-1)*-1.1869670152664185+-0.9098482131958008)*1.0137073993682861+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.022220861166715622+((v_2-2.0)*2/(12.0-2.0)-1)*-0.13009648025035858+-0.001967411022633314)*0.30811983346939087+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*-1.1405948400497437+((v_2-2.0)*2/(12.0-2.0)-1)*0.2297222912311554+-0.42210036516189575)*-0.004821733105927706)*0.2176584154367447+np.tanh(-0.5404620170593262+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*1.5849065780639648+((v_2-2.0)*2/(12.0-2.0)-1)*-0.17699909210205078+1.3885849714279175)*-1.4173427820205688+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*2.022256374359131+((v_2-2.0)*2/(12.0-2.0)-1)*-1.2527353763580322+0.7093727588653564)*-0.5712307691574097+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.21007363498210907+((v_2-2.0)*2/(12.0-2.0)-1)*-1.952702283859253+-2.084312915802002)*-0.5159547924995422+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.6200516819953918+((v_2-2.0)*2/(12.0-2.0)-1)*-0.01179190631955862+-0.14483411610126495)*0.08845138549804688+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*-0.6299529075622559+((v_2-2.0)*2/(12.0-2.0)-1)*2.1679329872131348+1.142025113105774)*0.283672034740448+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.1469927728176117+((v_2-2.0)*2/(12.0-2.0)-1)*-1.1869670152664185+-0.9098482131958008)*0.05846757814288139+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.022220861166715622+((v_2-2.0)*2/(12.0-2.0)-1)*-0.13009648025035858+-0.001967411022633314)*-0.14447298645973206+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*-1.1405948400497437+((v_2-2.0)*2/(12.0-2.0)-1)*0.2297222912311554+-0.42210036516189575)*0.18839995563030243)*-0.3329557776451111+np.tanh(-0.4493350386619568+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*1.5849065780639648+((v_2-2.0)*2/(12.0-2.0)-1)*-0.17699909210205078+1.3885849714279175)*0.15731403231620789+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*2.022256374359131+((v_2-2.0)*2/(12.0-2.0)-1)*-1.2527353763580322+0.7093727588653564)*-0.21006150543689728+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.21007363498210907+((v_2-2.0)*2/(12.0-2.0)-1)*-1.952702283859253+-2.084312915802002)*-0.6949948668479919+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.6200516819953918+((v_2-2.0)*2/(12.0-2.0)-1)*-0.01179190631955862+-0.14483411610126495)*-0.16235138475894928+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*-0.6299529075622559+((v_2-2.0)*2/(12.0-2.0)-1)*2.1679329872131348+1.142025113105774)*-0.05456991493701935+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.1469927728176117+((v_2-2.0)*2/(12.0-2.0)-1)*-1.1869670152664185+-0.9098482131958008)*0.4173315465450287+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.022220861166715622+((v_2-2.0)*2/(12.0-2.0)-1)*-0.13009648025035858+-0.001967411022633314)*0.018741950392723083+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*-1.1405948400497437+((v_2-2.0)*2/(12.0-2.0)-1)*0.2297222912311554+-0.42210036516189575)*-0.2666059136390686)*0.02014823444187641+np.tanh(-0.17410100996494293+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*1.5849065780639648+((v_2-2.0)*2/(12.0-2.0)-1)*-0.17699909210205078+1.3885849714279175)*-0.056692659854888916+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*2.022256374359131+((v_2-2.0)*2/(12.0-2.0)-1)*-1.2527353763580322+0.7093727588653564)*0.023432588204741478+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.21007363498210907+((v_2-2.0)*2/(12.0-2.0)-1)*-1.952702283859253+-2.084312915802002)*-0.001674806117080152+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.6200516819953918+((v_2-2.0)*2/(12.0-2.0)-1)*-0.01179190631955862+-0.14483411610126495)*-0.4654186964035034+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*-0.6299529075622559+((v_2-2.0)*2/(12.0-2.0)-1)*2.1679329872131348+1.142025113105774)*-0.23890039324760437+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.1469927728176117+((v_2-2.0)*2/(12.0-2.0)-1)*-1.1869670152664185+-0.9098482131958008)*-0.3198895752429962+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*0.022220861166715622+((v_2-2.0)*2/(12.0-2.0)-1)*-0.13009648025035858+-0.001967411022633314)*-0.6588759422302246+np.tanh(((v_1_a[i]-4.0)*2/(29.0-4.0)-1)*-1.1405948400497437+((v_2-2.0)*2/(12.0-2.0)-1)*0.2297222912311554+-0.42210036516189575)*-0.30746638774871826)*-0.0010518231429159641)*(9.695517319666072-0.01339902483067614)+0.01339902483067614

       
plotNetworkOutput()
v_1_a, v_2 = np.meshgrid(v_1_a,v_2)
ax.plot_wireframe(v_1_a, v_2, result_matrix.transpose(), color='g')
ax.contour(v_1_a, v_2, result_matrix.transpose(),levels=[5], colors='r', width=10)

#####################################################
x = np.array([5,6])
y = np.array([2])
result_matrix_check =  np.zeros((len(x), len(y)))

# Loop through each folder
# Construct the file paths for dat1/iv.dat and dat17/iv.dat
for i in range(len(y)):
    for j in range(len(x)):
        folder_name = f"C:\SST_BP1\SOIMOS_dox{y[i]}nm_L{x[j]}nm"
        file_path1 = os.path.join( folder_name, 'dat1', 'iv.dat')
        file_path17 = os.path.join( folder_name, 'dat17', 'iv.dat')

        try:
            # Read values from dat1/iv.dat
            data1 = np.loadtxt(file_path1, skiprows=1)  # Skip the header line
            ids_vgs0V = data1[1]
            #value1 = data1[0, 1]  # Assuming the value you want is in the first row, second column
            
            # Read values from dat17/iv.dat
            data17 = np.loadtxt(file_path17, skiprows=2)  # Skip the header line
            ids_vgs8V = data17[1]  # Assuming the value you want is in the first row, second column

            # Append the values to the result matrix
            ids_ratio =ids_vgs8V/ids_vgs0V
            result_matrix_check[j][i] = ids_ratio
        except Exception as e:
            # Handle the case where the file is not found or the format is incorrect
            print(f'Error reading files in folder {folder_name}: {str(e)}')
x,y = np.meshgrid(x, y)
result_matrix_check = np.log10(result_matrix_check)
ax.scatter(x, y, result_matrix_check.transpose(), marker="x", color="b")


#####################################################
x_full = [4,6,9,14,19,24,29]
y_full = [2,2.5,3,3.5,4,5,6,8,10,12]    
result_matrix_check_full =  np.zeros((len(x_full), len(y_full)))

# Loop through each folder
# Construct the file paths for dat1/iv.dat and dat17/iv.dat
for i in range(len(y_full)):
    for j in range(len(x_full)):
        folder_name = f"C:\SST_BP1\SOIMOS_dox{y_full[i]}nm_L{x_full[j]}nm"
        file_path1 = os.path.join( folder_name, 'dat1', 'iv.dat')
        file_path17 = os.path.join( folder_name, 'dat17', 'iv.dat')

        try:
            # Read values from dat1/iv.dat
            data1 = np.loadtxt(file_path1, skiprows=1)  # Skip the header line
            ids_vgs0V = data1[1]
            #value1 = data1[0, 1]  # Assuming the value you want is in the first row, second column
            
            # Read values from dat17/iv.dat
            data17 = np.loadtxt(file_path17, skiprows=2)  # Skip the header line
            ids_vgs8V = data17[1]  # Assuming the value you want is in the first row, second column

            # Append the values to the result matrix
            ids_ratio =ids_vgs8V/ids_vgs0V
            result_matrix_check_full[j][i] = ids_ratio
        except Exception as e:
            # Handle the case where the file is not found or the format is incorrect
            print(f'Error reading files in folder {folder_name}: {str(e)}')
x_full,y_full = np.meshgrid(x_full, y_full)

ax.scatter(x_full, y_full, np.log10(result_matrix_check_full.transpose()), marker="o", color="r")
ax.set_xlabel('$L_{channel} (nm)$')
ax.set_ylabel('$d_{ox} (nm)$')
# ax.set_yscale('log')  # Set the y-axis to logarithmic scale\frac{I_{ds,on}}{I_{ds,off}} (Vgs=8V / Vgs=0V)
ax.set_zlabel('$\log(I_{ds,on}/I_{ds,off}) (Vgs=8V / Vgs=0V)$')

plt.show()